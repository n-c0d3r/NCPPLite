#pragma once

/** @file ncpp/containers/eastl_bindings.hpp
*	@brief Typedefs eastl bindings.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/containers/eastl_containers.hpp>
#include <ncpp/containers/binding_helper.hpp>

#pragma endregion



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////
//  string
////////////////////////////////////////////////////////////////////////////////////
NCPP_CONTAINERS_DEFINE_ALLOCATOR_BINDING(
    NCPP_MA(ncpp::containers::TF_string<F_char__, F_allocator__>),
    NCPP_MA(F_allocator__),
    NCPP_MA(ncpp::containers::TF_string<F_char__, F_new_allocator__>),
    typename F_char__,
    typename F_allocator__
);



////////////////////////////////////////////////////////////////////////////////////
//  list, vector, deque
////////////////////////////////////////////////////////////////////////////////////
NCPP_CONTAINERS_DEFINE_ALLOCATOR_BINDING(
    NCPP_MA(ncpp::containers::TF_list<F_item__, F_allocator__>),
    NCPP_MA(F_allocator__),
    NCPP_MA(ncpp::containers::TF_list<F_item__, F_new_allocator__>),
    typename F_item__,
    typename F_allocator__
);
NCPP_CONTAINERS_DEFINE_ALLOCATOR_BINDING(
    NCPP_MA(ncpp::containers::TF_vector<F_item__, F_allocator__>),
    NCPP_MA(F_allocator__),
    NCPP_MA(ncpp::containers::TF_vector<F_item__, F_new_allocator__>),
    typename F_item__,
    typename F_allocator__
);
NCPP_CONTAINERS_DEFINE_ALLOCATOR_BINDING(
    NCPP_MA(ncpp::containers::TF_deque<F_item__, F_allocator__, subarray_size__>),
    NCPP_MA(F_allocator__),
    NCPP_MA(ncpp::containers::TF_deque<F_item__, F_new_allocator__, subarray_size__>),
    typename F_item__,
    typename F_allocator__,
    unsigned subarray_size__
);



////////////////////////////////////////////////////////////////////////////////////
//  set, map, unordered set, unordered map
////////////////////////////////////////////////////////////////////////////////////
NCPP_CONTAINERS_DEFINE_ALLOCATOR_BINDING(
    NCPP_MA(ncpp::containers::TF_set<F_item__, F_compare, F_allocator__>),
    NCPP_MA(F_allocator__),
    NCPP_MA(ncpp::containers::TF_set<F_item__, F_compare, F_new_allocator__>),
    typename F_item__,
    typename F_compare,
    typename F_allocator__
);
NCPP_CONTAINERS_DEFINE_ALLOCATOR_BINDING(
    NCPP_MA(ncpp::containers::TF_map<F_key__, F_value__, F_compare, F_allocator__>),
    NCPP_MA(F_allocator__),
    NCPP_MA(ncpp::containers::TF_map<F_key__, F_value__, F_compare, F_new_allocator__>),
    typename F_key__,
    typename F_value__,
    typename F_compare,
    typename F_allocator__
);
NCPP_CONTAINERS_DEFINE_ALLOCATOR_BINDING(
    NCPP_MA(ncpp::containers::TF_unordered_set<F_item__, F_hash__, F_predicate__, F_allocator__>),
    NCPP_MA(F_allocator__),
    NCPP_MA(ncpp::containers::TF_unordered_set<F_item__, F_hash__, F_predicate__, F_new_allocator__>),
    typename F_item__,
    typename F_hash__,
    typename F_predicate__,
    typename F_allocator__
);
NCPP_CONTAINERS_DEFINE_ALLOCATOR_BINDING(
    NCPP_MA(ncpp::containers::TF_unordered_map<F_key__, F_value__, F_hash__, F_predicate__, F_allocator__>),
    NCPP_MA(F_allocator__),
    NCPP_MA(ncpp::containers::TF_unordered_map<F_key__, F_value__, F_hash__, F_predicate__, F_new_allocator__>),
    typename F_key__,
    typename F_value__,
    typename F_hash__,
    typename F_predicate__,
    typename F_allocator__
);



////////////////////////////////////////////////////////////////////////////////////
//  queue, stack
////////////////////////////////////////////////////////////////////////////////////
NCPP_CONTAINERS_DEFINE_ALLOCATOR_BINDING(
    NCPP_MA(ncpp::containers::TF_queue<F_item__, F_deque__>),
    NCPP_MA(ncpp::containers::TF_container_allocator<F_deque__>),
    NCPP_MA(ncpp::containers::TF_queue<F_item__, ncpp::containers::TF_bind_container_allocator<F_deque__, F_new_allocator__>>),
    typename F_item__,
    typename F_deque__
);
NCPP_CONTAINERS_DEFINE_ALLOCATOR_BINDING(
    NCPP_MA(ncpp::containers::TF_stack<F_item__, F_stack__>),
    NCPP_MA(ncpp::containers::TF_container_allocator<F_stack__>),
    NCPP_MA(ncpp::containers::TF_stack<F_item__, ncpp::containers::TF_bind_container_allocator<F_stack__, F_new_allocator__>>),
    typename F_item__,
    typename F_stack__
);