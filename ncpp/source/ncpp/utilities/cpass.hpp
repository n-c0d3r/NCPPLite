#pragma once

/**
 *  @file ncpp/utilities/cpass.hpp
 *  @brief Implements cpass.
 */



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/utilities/sizeof.hpp>
#include <ncpp/utilities/nth_template_targ.hpp>
#include <ncpp/containers/view.hpp>

#pragma endregion



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

    namespace utilities {

        namespace internal {

            template<typename F__>
            struct TF_custom_cpass_bind_helper {

                using F = F__;

            };

            template<typename F__, bool is_always_mutable__ = false>
            struct TF_cpass_helper {

                static constexpr b8 is_size_over_pointer_size = (T_sizeof<F__> > T_sizeof<void *>);
                static constexpr b8 is_has_container_allocator = !std::is_same_v<containers::TF_container_allocator<F__>, void>;

                using F = TF_nth_template_targ<
                    (
                        (!std::is_same_v<typename TF_custom_cpass_bind_helper<F__>::F, F__>) ? 3 :
                        (!is_size_over_pointer_size && !is_has_container_allocator) ? 0 :
                        (is_has_container_allocator) ? 2 :
                        1
                    ),
                    F__,
                    const F__ &,
                    containers::TF_view<F__, is_always_mutable__>,
                    typename TF_custom_cpass_bind_helper<F__>::F
                >;

            };

            template<typename F__, bool is_always_mutable__>
            struct TF_cpass_helper<F__&, is_always_mutable__> {

                using F = F__&;

            };
            template<typename F__, bool is_always_mutable__>
            struct TF_cpass_helper<const F__&, is_always_mutable__> {

                using F = const F__&;

            };

            template<typename F_element__, sz size__, bool is_always_mutable__>
            struct TF_cpass_helper<F_element__[size__], is_always_mutable__> {

                using F = const F_element__*;

            };

        }

        template<typename F__, bool is_always_mutable__ = false>
        using TF_cpass = typename internal::TF_cpass_helper<F__, is_always_mutable__>::F;



        template<typename F__, bool is_always_mutable__ = false>
        NCPP_FORCE_INLINE TF_cpass<F__, is_always_mutable__> T_cpass(const F__& x) noexcept {

            return x;
        }

        template<typename F_item__, sz size__, bool is_always_mutable__ = false>
        NCPP_FORCE_INLINE TF_cpass<F_item__[size__], is_always_mutable__> T_cpass(F_item__ x[size__]) noexcept {

            return x;
        }

    }

}



#define NCPP_BIND_CUSTOM_CPASS(FromType, ToType, ...)\
namespace ncpp::utilities::internal {\
\
    template<__VA_ARGS__>\
    struct TF_custom_cpass_bind_helper<FromType> {\
\
        using F = ToType;\
\
    };\
\
    template<__VA_ARGS__>\
    struct TF_custom_cpass_bind_helper<FromType const> {\
\
        using F = ToType;\
\
    };\
    \
}