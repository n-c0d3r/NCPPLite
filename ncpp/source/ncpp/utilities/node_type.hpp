#pragma once

/**
 *  @file ncpp/utilities/node_type.hpp
 *  @brief Implements node_type.
 */



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

#pragma endregion



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

    namespace utilities {

        namespace internal {

            template<class F__, typename = void>
            struct TF_is_has_eastl_node_type : eastl::false_type {};
            template<class F__>
            struct TF_is_has_eastl_node_type<F__, std::void_t<typename F__::node_type>> : eastl::true_type {};

            template<class F__, typename = void>
            struct TF_is_has_ncpp_node_type : eastl::false_type {};
            template<class F__>
            struct TF_is_has_ncpp_node_type<F__, std::void_t<typename F__::F_node>> : eastl::true_type {};

            template<class F__, i32 = 0>
            struct TF_node_helper {

                using F = void;

            };

            template<class F__>
            struct TF_node_helper<F__, 1> {

                using F = typename F__::node_type;

            };

            template<class F__>
            struct TF_node_helper<F__, 2> {

                using F = typename F__::F_node;

            };

        }
        


        template<class F__>
        using TF_node = typename internal::TF_node_helper<
            F__,
            internal::TF_is_has_eastl_node_type<F__>::value * 1
            + internal::TF_is_has_ncpp_node_type<F__>::value * 2
        >::F;

        template<class F__>
        concept T_is_has_node = (
            internal::TF_is_has_eastl_node_type<F__>::value
            || internal::TF_is_has_ncpp_node_type<F__>::value
        );

    }

}