#pragma once

/**
 *  @file ncpp/utilities/safe_initializer_list.hpp
 *  @brief Implements safe_initializer_list.
 */



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

#pragma endregion



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

    namespace utilities {

        namespace internal {

            template<class F__>
            concept T_safe_initializer_list_eastl_style = requires { typename F__::value_type; };

            template<class F__>
            concept T_safe_initializer_list_ncpp_style = requires { typename F__::F_value; };

            template<class F__, i32>
            struct TF_safe_initializer_list_helper {

                using F = const F__&;

            };

            template<class F__>
            struct TF_safe_initializer_list_helper<F__, 1> {

                using F = typename F__::value_type;

            };
            template<class F__>
            struct TF_safe_initializer_list_helper<F__, 2> {

                using F = typename F__::F_value;

            };

        }



        template<class F__>
        using TF_safe_initializer_list = typename internal::TF_safe_initializer_list_helper<
            F__,
            (internal::T_safe_initializer_list_eastl_style<F__> + internal::T_safe_initializer_list_ncpp_style<F__> * 2)
        >::F;
        template<class F__>
        concept T_is_has_default_initializer_list = (requires { typename F__::value_type; } || requires { typename F__::F_value; });

    }

}