#pragma once

/**
 *  @file ncpp/event.hpp
 *  @brief Implements event.
 */



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/containers/.hpp>

#pragma endregion 



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

    template<class F_listener_list_allocator__ = mem::F_default_allocator>
    class TF_event {

    private:
        using F_this = TF_event<F_listener_list_allocator__>;



    public:
        using F_listener_list_allocator = F_listener_list_allocator__;

        using F_listener = eastl::function<void(F_this&)>;
        using F_listener_list = containers::TF_list<F_listener, F_listener_list_allocator>;
        using F_listener_handle = typename F_listener_list::iterator;



    public:
        friend class F_event_storage;



    private:
        F_listener_list listener_list_;
        u32 index_ = 0;
        u64 hash_code_ = 0;

    public:
        NCPP_FORCE_INLINE u64 hash_code() const { return hash_code_; }



    public:
        NCPP_FORCE_INLINE TF_event(u64 hash_code = 0, const F_listener_list_allocator& listener_list_allocator = F_listener_list_allocator()) :
            listener_list_(listener_list_allocator),
            hash_code_(hash_code)
        {



        }
        ~TF_event() {



        }



    public:
        template<typename F_func__>
        NCPP_FORCE_INLINE F_listener_handle T_push_back_listener(F_func__&& func) {

            listener_list_.push_back(std::forward<F_func__>(func));

            return --listener_list_.end();
        }
        template<typename F_func__>
        NCPP_FORCE_INLINE F_listener_handle T_push_front_listener(F_func__&& func) {

            listener_list_.push_front(std::forward<F_func__>(func));

            return listener_list_.begin();
        }
        NCPP_FORCE_INLINE void remove_listener(F_listener_handle handle) {

            listener_list_.erase(handle);
        }

        void invoke() {

            for (auto& listener : listener_list_) {

                listener(*this);

            }

        }

    };



    using F_event = TF_event<>;



#define NCPP_STATIC_EVENTS_GETTER_STEP(I, EventName) \
        template<> \
        NCPP_FORCE_INLINE auto& T_get_event<decltype(EventName)>() { return EventName; };

#define NCPP_DECLARE_STATIC_EVENTS(...) \
        template<class F_event__> \
        NCPP_FORCE_INLINE auto& T_get_event(); \
        NCPP_EXPAND(NCPP_FOR_EACH(NCPP_STATIC_EVENTS_GETTER_STEP __VA_OPT__(,) __VA_ARGS__));

}
