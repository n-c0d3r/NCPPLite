#pragma once

/** @file ncpp/mem/memory_counting.hpp
*	@brief Implements native memory counting functionalities.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <ncpp/prerequisites.hpp>

#pragma endregion



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace ncpp {

	namespace mem {



		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#ifdef NCPP_ENABLE_MEMORY_COUNTING
		extern aptrd total_allocated_memory_g;
		extern aptrd usable_allocated_memory_g;

#define NCPP_TOTAL_ALLOCATED_MEMORY() total_allocated_memory_g.load(eastl::memory_order_acquire)
#define NCPP_INCREASE_TOTAL_ALLOCATED_MEMORY(bytes) total_allocated_memory_g.fetch_add((ncpp::ptrd)bytes, eastl::memory_order_release)
#define NCPP_DECREASE_TOTAL_ALLOCATED_MEMORY(bytes) total_allocated_memory_g.fetch_sub((ncpp::ptrd)bytes, eastl::memory_order_release)

#define NCPP_USABLE_ALLOCATED_MEMORY() usable_allocated_memory_g.load(eastl::memory_order_acquire)
#define NCPP_INCREASE_USABLE_ALLOCATED_MEMORY(bytes) usable_allocated_memory_g.fetch_add((ncpp::ptrd)bytes, eastl::memory_order_release)
#define NCPP_DECREASE_USABLE_ALLOCATED_MEMORY(bytes) usable_allocated_memory_g.fetch_sub((ncpp::ptrd)bytes, eastl::memory_order_release)



#else



#define NCPP_TOTAL_ALLOCATED_MEMORY() 0
#define NCPP_INCREASE_TOTAL_ALLOCATED_MEMORY(bytes)
#define NCPP_DECREASE_TOTAL_ALLOCATED_MEMORY(bytes)

#define NCPP_USABLE_ALLOCATED_MEMORY() 0
#define NCPP_INCREASE_USABLE_ALLOCATED_MEMORY(bytes)
#define NCPP_DECREASE_USABLE_ALLOCATED_MEMORY(bytes)

#endif



		void log_memory_stats();

	}

}
